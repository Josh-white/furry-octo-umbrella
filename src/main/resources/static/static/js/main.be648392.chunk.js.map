{"version":3,"sources":["assets/battleshipLogo.png","components/Ship/ShipCreator.tsx","hooks/useBoard.ts","components/Ship/shipHelpers.tsx","providers/gameStateContext.tsx","hooks/usePort.ts","components/board/Port.tsx","components/board/CreateGrid.tsx","components/board/EnemyBoard.tsx","components/board/PlayerBoard.tsx","components/board/GameBoard.tsx","components/GameStart/SplashScreen.tsx","App.tsx","index.tsx"],"names":["ShipCreator","className","size","isVertical","shipPieces","useState","pieceForOnHover","setPieceForOnHover","piece","push","aria-label","onMouseEnter","handleOnMouseEnter","onMouseLeave","data-testid","id","data-shipsize","draggable","onDragStart","event","dataFromShip","JSON","stringify","shipName","currentTarget","shipPieceNumber","dataTransfer","setData","getOnDragStart","onDrag","preventDefault","handleShipDrag","onDragEnd","handleShipDragEnd","generateEmptyBoard","tempPlayerBoard","row","column","newGridSquare","x","y","isOpen","initialShipsInPort","GameStateContext","createContext","GameStateProvider","children","board","playerBoard","setPlayerBoard","enemyBoard","setEnemyBoard","playerPlacedShip","ship","prevState","map","gridSquare","matched","find","shipPiece","enemyPlacedShip","pieceOfShip","resetPlayerBoard","isValidShipPlacement","isValid","count","forEach","length","useBoard","port","setPort","removeShip","newPort","filter","resetPort","usePort","Provider","value","useGameState","context","React","useContext","Port","setIsVertical","handleStartGameClick","a","axios","post","response","alert","console","log","error","onClick","disabled","CreateGrid","gridClass","data-x","data-y","onDrop","parse","getData","allShipPieces","tempFullShipArray","upperXPosition","xPosition","i","pieceNumber","yPosition","lowerXPositions","leftYPosition","rightYPositions","generateFullSizeOfShip","handleShipDrop","onDragOver","preventDefaultDrag","onDragEnter","onDragLeave","EnemyBoard","xAxis","String","fromCharCode","yAxis","PlayerBoard","GameBoard","SplashScreen","playingGame","setPlayingGame","src","battleshipLogo","alt","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be648392.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/battleshipLogo.80ab244e.png\";","import React, {useState} from \"react\";\n\nexport interface ShipCreatorProps {\n  className: string,\n  size: number,\n  isVertical: boolean\n}\n\nexport const ShipCreator = ({className, size, isVertical}: ShipCreatorProps) => {\n\n  const shipPieces = []\n  const [pieceForOnHover, setPieceForOnHover] = useState<number>()\n\n  function handleOnMouseEnter(piece: number) {\n    setPieceForOnHover(piece)\n  }\n\n  function handleOnMouseLeave() {\n    setPieceForOnHover(0)\n  }\n\n  for (let piece = 1; piece <= size; piece++) {\n    shipPieces.push(\n      <div className={`${pieceForOnHover === piece ? 'hovered' : ''} ship--${className} `}\n           key={`${className}-${piece}`}\n           aria-label={`${className}-${piece}`}\n           onMouseEnter={() => handleOnMouseEnter(piece)}\n           onMouseLeave={() => handleOnMouseLeave()}/>)\n  }\n\n  //TODO collapse these into one function\n  function handleShipDrag(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault()\n  }\n\n  function handleShipDragEnd(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault()\n  }\n\n  function getOnDragStart(event: React.DragEvent<HTMLDivElement>) {\n    const dataFromShip = JSON.stringify(\n      {\n        shipName: event.currentTarget.id,\n        shipPieceNumber: pieceForOnHover,\n        isVertical: isVertical,\n        size: size\n      })\n    return event.dataTransfer.setData(\"ShipData\", dataFromShip);\n\n  }\n\n  return (\n    <div data-testid={`${className}--container`}\n         id={`${className}`}\n         data-shipsize={size}\n         className={isVertical ? `ship--container--vertical` : `ship--container--horizontal`}\n         draggable={true}\n         onDragStart={(event) => getOnDragStart(event)}\n         onDrag={(event) => handleShipDrag(event)}\n         onDragEnd={(event) => handleShipDragEnd(event)}\n    >\n      {shipPieces}\n    </div>\n  )\n}","import {useState} from \"react\";\n\nexport interface GridSquare {\n    x: number,\n    y: number,\n    isOpen: boolean,\n    shipName?: string\n}\n\nexport const useBoard = () => {\n    const [playerBoard, setPlayerBoard] = useState<GridSquare[]>(generateEmptyBoard())\n    const [enemyBoard, setEnemyBoard] = useState<GridSquare[]>(generateEmptyBoard())\n\n    const isValidShipPlacement = (ship: GridSquare[]) => {\n        let isValid = false\n        let count = 0\n        playerBoard.forEach(gridSquare => {\n            const matched = ship.find(shipPiece => gridSquare.x === shipPiece.x && gridSquare.y === shipPiece.y && gridSquare.isOpen)\n            if (matched) {\n                count++\n            }\n        })\n        if(count === ship.length) isValid=true\n\n        return isValid\n    }\n\n    const playerPlacedShip = (ship: GridSquare[]) => {\n        setPlayerBoard(prevState => prevState.map(gridSquare => {\n            const matched = ship.find(shipPiece => gridSquare.x === shipPiece.x && gridSquare.y === shipPiece.y && gridSquare.isOpen)\n            if (matched) {\n                return  {...gridSquare, isOpen: matched.isOpen, shipName: matched.shipName}\n            }\n            return {...gridSquare}\n        }))\n    }\n\n    const enemyPlacedShip = (pieceOfShip: GridSquare) => {\n        setEnemyBoard(prevState => prevState.map(gridSquare =>\n            gridSquare.x === pieceOfShip.x && gridSquare.y === pieceOfShip.y ?\n                {...gridSquare ,isOpen:false, shipName:pieceOfShip.shipName} : {...gridSquare}))\n\n    }\n\n    const resetPlayerBoard = () => {\n        setPlayerBoard(generateEmptyBoard())\n    }\n\n    return {playerBoard, enemyBoard, playerPlacedShip, enemyPlacedShip, resetPlayerBoard, isValidShipPlacement}\n}\n\nconst generateEmptyBoard = () => {\n    let tempPlayerBoard: GridSquare[] = []\n\n    for (let row = 0; row < 10; row++) {\n        for (let column = 0; column < 10; column++) {\n            const newGridSquare: GridSquare = {\n                x: row,\n                y: column,\n                isOpen: true,\n            }\n            tempPlayerBoard.push(newGridSquare)\n        }\n    }\n    return tempPlayerBoard\n}","import {Ship} from \"../../hooks/usePort\";\nimport {GridSquare} from \"../../hooks/useBoard\";\n//TODO rename to just a ts file\nexport interface InfoNeededToPlaceShipOnPlayerBoard {\n  xPosition: number,\n  yPosition: number,\n  shipName: string,\n  pieceNumber: number,\n  isVertical: boolean,\n  size: number\n}\n\nexport const generateFullSizeOfShip = (pieceOfShip: InfoNeededToPlaceShipOnPlayerBoard) => {\n  const tempFullShipArray: GridSquare[] = []\n\n  if(pieceOfShip.isVertical){\n    let upperXPosition = pieceOfShip.xPosition-1\n\n    for (let i = 1; i < pieceOfShip.pieceNumber; i++) {\n      const shipPiece: GridSquare = {x: upperXPosition, y: pieceOfShip.yPosition, isOpen: false, shipName: pieceOfShip.shipName}\n      tempFullShipArray.push(shipPiece)\n      upperXPosition--\n    }\n\n    tempFullShipArray.push({x: pieceOfShip.xPosition, y: pieceOfShip.yPosition, isOpen: false, shipName:pieceOfShip.shipName})\n\n    let lowerXPositions = pieceOfShip.xPosition + 1\n    for (let i = pieceOfShip.size; i > pieceOfShip.pieceNumber; i--) {\n      const shipPiece: GridSquare = {x: lowerXPositions, y: pieceOfShip.yPosition, isOpen: false, shipName: pieceOfShip.shipName}\n      tempFullShipArray.push(shipPiece)\n      lowerXPositions++\n    }\n  }\n\n  if(!pieceOfShip.isVertical) {\n    let leftYPosition = pieceOfShip.yPosition-1\n\n    for (let i = 1; i < pieceOfShip.pieceNumber; i++) {\n      const shipPiece: GridSquare = {x: pieceOfShip.xPosition, y: leftYPosition, isOpen: false, shipName: pieceOfShip.shipName}\n      tempFullShipArray.push(shipPiece)\n      leftYPosition--\n    }\n\n    tempFullShipArray.push({x: pieceOfShip.xPosition, y: pieceOfShip.yPosition, isOpen: false, shipName: pieceOfShip.shipName})\n\n    let rightYPositions = pieceOfShip.yPosition + 1\n    for (let i = pieceOfShip.size; i > pieceOfShip.pieceNumber; i--) {\n      const shipPiece: GridSquare = {x: pieceOfShip.xPosition, y: rightYPositions, isOpen: false, shipName: pieceOfShip.shipName}\n      tempFullShipArray.push(shipPiece)\n      rightYPositions++\n    }\n  }\n  return tempFullShipArray\n}\n\nexport const initialShipsInPort: Ship[] = [\n  {\n    shipName: \"carrier\",\n    size: 5\n  },\n  {\n    shipName: \"battleship\",\n    size: 4\n  },\n  {\n    shipName: \"cruiser\",\n    size: 3\n  },\n  {\n    shipName: \"submarine\",\n    size: 3\n  },\n  {\n    shipName: \"destroyer\",\n    size: 2\n  }]\n","import React, {createContext} from \"react\";\nimport {useBoard} from \"../hooks/useBoard\";\nimport {usePort} from \"../hooks/usePort\";\n\ninterface gameStateContextProps {\n  board: ReturnType<typeof useBoard>,\n  port: ReturnType<typeof usePort>\n}\n//TODO change this and spell out all the types so that it throws errors that will help a dev if they try to use context without a provider.\n\n// const GameStateContext = createContext<gameStateContextProps>({board: {playerPlaceShip: () => throw new Error('you probably want a provider')}} as any)\nconst GameStateContext = createContext<gameStateContextProps>({} as any)\n\nconst GameStateProvider: React.FC = ({children}) => {\n  const board = useBoard()\n  const port = usePort()\n\n  return (\n    <GameStateContext.Provider\n      value={{board, port}}>\n      {children}\n    </GameStateContext.Provider>\n  )\n}\n\nexport const useGameState = () => {\n  const context = React.useContext(GameStateContext)\n  return {...context.board, ...context.port}\n}\n\nexport {GameStateProvider}","import {useState} from \"react\";\nimport {initialShipsInPort} from \"../components/Ship/shipHelpers\";\n\nexport interface Ship {\n    shipName: string,\n    size: number\n}\n\nexport const usePort = () => {\n    const [port, setPort] = useState<Ship[]>(initialShipsInPort)\n\n    const removeShip = (shipName: string) => {\n        const newPort = port.filter(ship => ship.shipName !== shipName)\n        setPort(newPort)\n    }\n\n    const resetPort = () => {\n        setPort(initialShipsInPort)\n    }\n\n    return {port, removeShip, resetPort}\n}","import React, {useState} from \"react\";\nimport \"./Port.css\"\nimport {ShipCreator} from \"../Ship/ShipCreator\";\nimport {useGameState} from \"../../providers/gameStateContext\";\nimport axios from \"axios\";\n\nexport interface PortProps {\n}\n\nexport const Port = () => {\n  const {port, resetPort, resetPlayerBoard, playerBoard} = useGameState()\n  const [isVertical, setIsVertical] = useState(true)\n\n  const rotateShips = () => {\n    //TODO change this because I know its not right\n    setIsVertical(!isVertical)\n  }\n\n  const handleResetShipsClick = () => {\n    resetPort()\n    resetPlayerBoard()\n  }\n\n  const handleStartGameClick = async () => {\n    try {\n      const response = await axios.post('/startNewGame', playerBoard)\n      alert(\"Oh shit the backend took the request.\")\n      console.log(response);\n    } catch (error) {\n      alert('my creator has not build the backend to handle the request')\n      console.error(error);\n    }\n  }\n\n  return (\n    <div className='port--container'>\n      <div>\n        <h2>\n          Safe Harbor\n        </h2>\n        <button onClick={rotateShips}>\n          Rotate\n        </button>\n        <button onClick={() => handleResetShipsClick()}>\n          Reset Ships\n        </button>\n        <button disabled={port.length > 0} onClick={() => handleStartGameClick()}>\n          Start Game\n        </button>\n      </div>\n      <div className=\"port\">\n        {port.map(ship =>\n          <ShipCreator\n            key={`${ship.shipName}-${ship.size}`}\n            className={ship.shipName}\n            size={ship.size}\n            isVertical={isVertical}/>)}\n      </div>\n    </div>\n  );\n}","import React from \"react\";\nimport {generateFullSizeOfShip} from \"../Ship/shipHelpers\";\nimport {useGameState} from \"../../providers/gameStateContext\";\n\nexport interface CreateGridProps {\n  className: string,\n  x: number,\n  y: number,\n  isOpen: boolean,\n  shipName?: string\n}\n\ninterface ShipData {\n  shipName: string,\n  shipPieceNumber: number,\n  isVertical: boolean,\n  size: number\n}\n\nexport const CreateGrid = (\n  {\n    className,\n    x,\n    y,\n    isOpen,\n    shipName,\n  }: CreateGridProps) => {\n  const {removeShip, playerPlacedShip, isValidShipPlacement} = useGameState()\n\n  let gridClass = \"grid\";\n\n  if (className) {\n    gridClass = `${gridClass} ${className}`;\n  }\n\n  if (isOpen) {\n    gridClass = `${gridClass} grid--open`;\n  }\n\n  if (!isOpen && shipName) {\n    gridClass = `${gridClass} ${shipName}`\n  }\n\n  function preventDefaultDrag(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault()\n  }\n\n  function handleShipDragEnter(event: React.DragEvent<HTMLDivElement>) {\n\n    //TODO prob do some checking on if this grid isOpen and change the colors of the tiles as the user moves through them\n  }\n\n  function handleShipDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    //TODO prob change some color of the tiles back to let the user know where the ship will be placed.\n  }\n\n  function handleShipDrop(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault()\n\n    const dataFromShip: ShipData = JSON.parse(event.dataTransfer.getData(\"ShipData\"))\n    const allShipPieces = generateFullSizeOfShip(\n      {\n        xPosition: x,\n        yPosition: y,\n        pieceNumber: dataFromShip.shipPieceNumber,\n        size: dataFromShip.size,\n        shipName: dataFromShip.shipName,\n        isVertical: dataFromShip.isVertical\n      })\n    if(isValidShipPlacement(allShipPieces)) {\n      removeShip(dataFromShip.shipName)\n      playerPlacedShip(allShipPieces)\n    }\n\n  }\n\n  return (className === `playerBoard--grid` ?\n      <div\n        className={gridClass}\n        data-x={x}\n        data-y={y}\n        aria-label={`${className} ${x},${y}`}\n        onDrop={(event) => handleShipDrop(event)}\n        onDragOver={(event) => preventDefaultDrag(event)}\n        onDragEnter={(event) => handleShipDragEnter(event)}\n        onDragLeave={(event) => handleShipDragLeave(event)}\n      >\n      </div> :\n      <div\n        className={gridClass}\n        data-x={x}\n        data-y={y}\n        aria-label={`${className} ${x},${y}`}\n      >\n      </div>\n\n  )\n}","import React from \"react\";\nimport {CreateGrid} from \"./CreateGrid\";\nimport {useGameState} from \"../../providers/gameStateContext\";\n\nexport const EnemyBoard = () => {\n\n  const {enemyBoard} = useGameState()\n\n  const xAxis = () => {\n    let x = []\n    for (let i = 1; i < 11; i++) {\n      x.push(<h3>{i}</h3>)\n    }\n    return x;\n  }\n\n  const yAxis = () => {\n    let y = []\n    for (let i = 65; i < 75; i++) {\n      y.push(<h3>{String.fromCharCode(i)}</h3>)\n    }\n    return y\n  }\n\n  return (\n    <div className=\"enemyBoard\">\n      <h1>Enemy Board</h1>\n      <div className=\"playerBoard--axis-container\">\n        <div className=\"playerBoard--axis-x\">{xAxis()}</div>\n        <div className=\"enemyBoard--container\">\n          {enemyBoard.map(gridSquare =>\n                  <CreateGrid\n                      className={`enemyBoard--grid`}\n                      isOpen={gridSquare.isOpen}\n                      x={gridSquare.x}\n                      y={gridSquare.y}\n                      key={`enemyBoard-${gridSquare.x}-${gridSquare.y}`}\n                  />)\n          }\n          <div className=\"playerBoard--axis-y\">{yAxis()}</div>\n        </div>\n      </div>\n    </div>\n    )\n}","import React from \"react\";\nimport {CreateGrid} from \"./CreateGrid\";\nimport {useGameState} from \"../../providers/gameStateContext\";\n\nexport interface PlayerBoardProps {\n}\n\nexport const PlayerBoard = () => {\n    const {playerBoard} = useGameState()\n\n    const xAxis = () => {\n        let x = []\n        for (let i = 1; i < 11; i++) {\n            x.push(<h3>{i}</h3>)\n        }\n        return x;\n    }\n\n    const yAxis = () => {\n        let y = []\n        for (let i = 65; i < 75; i++) {\n            y.push(<h3>{String.fromCharCode(i)}</h3>)\n        }\n        return y\n    }\n\n    return (\n        <div className=\"playerBoard\">\n            <h1>Player Board</h1>\n            <div className=\"playerBoard--axis-container\">\n                <div className=\"playerBoard--axis-x\">{xAxis()}</div>\n                <div className=\"playerBoard--container\">\n                    {playerBoard.map(gridSquare =>\n                            <CreateGrid\n                                className={`playerBoard--grid`}\n                                isOpen={gridSquare.isOpen}\n                                x={gridSquare.x}\n                                y={gridSquare.y}\n                                shipName={gridSquare.shipName}\n                                key={`playerBoard-${gridSquare.x}-${gridSquare.y}`}\n                            />)\n                    }\n                    <div className=\"playerBoard--axis-y\">{yAxis()}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport \"./GameBoard.css\"\nimport {Port} from \"./Port\"\nimport {EnemyBoard} from \"./EnemyBoard\";\nimport {PlayerBoard} from \"./PlayerBoard\";\nimport {GameStateProvider} from \"../../providers/gameStateContext\";\n\nexport const GameBoard = () => {\n\n  return (\n    <GameStateProvider>\n      <div className=\"game--container\">\n        <PlayerBoard/>\n        <EnemyBoard/>\n      </div>\n      <Port/>\n    </GameStateProvider>\n  )\n}","import React, {useState} from \"react\";\nimport \"./SplashScreen.css\"\nimport battleshipLogo from \"../../assets/battleshipLogo.png\"\nimport {GameBoard} from \"../board/GameBoard\";\n\nexport const SplashScreen = () => {\n  const [playingGame, setPlayingGame] = useState(false)\n  function singlePlayerGame() {\n    setPlayingGame(true)\n  }\n\n  return (\n    playingGame ? <GameBoard/> :\n    <div className=\"splashscreen\">\n      <img src={battleshipLogo} alt=\"battleship logo\" className=\"logo\"/>\n      <div className=\"button_container\">\n        <button aria-label=\"One Player\" onClick={singlePlayerGame}>One Player</button>\n        {/*<button aria-label=\"Two Player\">Two Player</button>*/}\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport {SplashScreen} from \"./components/GameStart/SplashScreen\";\n\nfunction App() {\n  return (\n    <SplashScreen/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n// just changing stuff"],"sourceRoot":""}